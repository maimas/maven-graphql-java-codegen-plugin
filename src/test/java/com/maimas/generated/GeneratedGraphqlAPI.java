package com.maimas.generated;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.util.RawValue;

import java.util.*;
import java.util.function.Consumer;


/**
* GENERATED BY MAVEN-GRAPHQL-JAVA-CODEGEN-PLUGIN.
*/
public class GeneratedGraphqlAPI {

public static class Schema {

}

public static class Types {

        public enum EnGender {
            Female,
            Male,
            Unknown
        }

        public enum EnUserStatus {
            Active,
            Pending
        }
        public static class User {
            public Date  createdDate;
            public Date  dateOfBirth;
            public String  email;
            public Boolean  enabled;
            public String  firstName;
            public EnGender  gender;
            public String  id;
            public String  lastName;
            public Date  modifiedDate;
            public EnUserStatus  status;
        public static final class Fields {
            public static String createdDate = "createdDate";
            public static String dateOfBirth = "dateOfBirth";
            public static String email = "email";
            public static String enabled = "enabled";
            public static String firstName = "firstName";
            public static String gender = "gender";
            public static String id = "id";
            public static String lastName = "lastName";
            public static String modifiedDate = "modifiedDate";
            public static String status = "status";
        }
        }
        public static class UserFragment {
        private final ResultFragment resultFragment = new ResultFragment();

            public UserFragment createdDate() {
            resultFragment.add(FragmentField.of("createdDate"));
            return this;
            }
            public UserFragment dateOfBirth() {
            resultFragment.add(FragmentField.of("dateOfBirth"));
            return this;
            }
            public UserFragment email() {
            resultFragment.add(FragmentField.of("email"));
            return this;
            }
            public UserFragment enabled() {
            resultFragment.add(FragmentField.of("enabled"));
            return this;
            }
            public UserFragment firstName() {
            resultFragment.add(FragmentField.of("firstName"));
            return this;
            }
            public UserFragment gender() {
            resultFragment.add(FragmentField.of("gender"));
            return this;
            }
            public UserFragment id() {
            resultFragment.add(FragmentField.of("id"));
            return this;
            }
            public UserFragment lastName() {
            resultFragment.add(FragmentField.of("lastName"));
            return this;
            }
            public UserFragment modifiedDate() {
            resultFragment.add(FragmentField.of("modifiedDate"));
            return this;
            }
            public UserFragment status() {
            resultFragment.add(FragmentField.of("status"));
            return this;
            }

        public ResultFragment getFragment() {
        return resultFragment;
        }
        }
        
        public static class UserInput {
            public String  email;
            public EnGender  gender;
            public Date  createdDate;
            public Boolean  enabled;
            public String  id;
            public Date  modifiedDate;
            public String  lastName;
            public Date  dateOfBirth;
            public String  firstName;
            public EnUserStatus  status;
            public String  password;
        }
}


        
        /**
        * Query root
        */
        public static class Query {

            /**
            * Generates GraphQL query string to perform "findById" operation.
            *
            * @return - graphql query string.
            */
            public GQLQuery findById(Consumer< FindByIdArgs> input,
                                          Consumer< Types.UserFragment> output){

            final FindByIdArgs args = new FindByIdArgs();
            input.accept(args);
            final Arguments arguments = args.getArguments();

            final Types.UserFragment fragment = new Types.UserFragment();
            output.accept(fragment);
            final ResultFragment resultFragment = fragment.getFragment();


            GQLFunction function = new GQLFunction(GQLFunctionType.Query, "findById")
            .arguments(arguments)
            .resultFragment(resultFragment)
            .returnType(new TypeReference<Types.User>() {});

            return GQLQuery.from(function);
            }

            /**
            * Arguments provider.
            *
            * @return - FindByIdArgs for "findById" operation.
            */
            public class FindByIdArgs {
            private Arguments arguments = new Arguments();

            public FindByIdArgs id(String id) {
                    arguments.add(Argument.of("id", id));
                    return this;
                    }

            private Arguments getArguments() {
            return arguments;
            }
            }

            /**
            * Generates GraphQL query string to perform "findByEmail" operation.
            *
            * @return - graphql query string.
            */
            public GQLQuery findByEmail(Consumer< FindByEmailArgs> input,
                                          Consumer< Types.UserFragment> output){

            final FindByEmailArgs args = new FindByEmailArgs();
            input.accept(args);
            final Arguments arguments = args.getArguments();

            final Types.UserFragment fragment = new Types.UserFragment();
            output.accept(fragment);
            final ResultFragment resultFragment = fragment.getFragment();


            GQLFunction function = new GQLFunction(GQLFunctionType.Query, "findByEmail")
            .arguments(arguments)
            .resultFragment(resultFragment)
            .returnType(new TypeReference<Types.User>() {});

            return GQLQuery.from(function);
            }

            /**
            * Arguments provider.
            *
            * @return - FindByEmailArgs for "findByEmail" operation.
            */
            public class FindByEmailArgs {
            private Arguments arguments = new Arguments();

            public FindByEmailArgs email(String email) {
                    arguments.add(Argument.of("email", email));
                    return this;
                    }

            private Arguments getArguments() {
            return arguments;
            }
            }

        }

        
        /**
        * Mutation root
        */
        public static class Mutation {

            /**
            * Generates GraphQL query string to perform "resetPassword" operation.
            *
            * @return - graphql query string.
            */
            public GQLQuery resetPassword(Consumer< ResetPasswordArgs> input,
                                          Consumer< Types.UserFragment> output){

            final ResetPasswordArgs args = new ResetPasswordArgs();
            input.accept(args);
            final Arguments arguments = args.getArguments();

            final Types.UserFragment fragment = new Types.UserFragment();
            output.accept(fragment);
            final ResultFragment resultFragment = fragment.getFragment();


            GQLFunction function = new GQLFunction(GQLFunctionType.Mutation, "resetPassword")
            .arguments(arguments)
            .resultFragment(resultFragment)
            .returnType(new TypeReference<Types.User>() {});

            return GQLQuery.from(function);
            }

            /**
            * Arguments provider.
            *
            * @return - ResetPasswordArgs for "resetPassword" operation.
            */
            public class ResetPasswordArgs {
            private Arguments arguments = new Arguments();

            public ResetPasswordArgs id(String id) {
                    arguments.add(Argument.of("id", id));
                    return this;
                    }public ResetPasswordArgs rawPassword(Optional<String> rawPassword) {
                    arguments.add(Argument.of("rawPassword", rawPassword));
                    return this;
                    }

            private Arguments getArguments() {
            return arguments;
            }
            }

            /**
            * Generates GraphQL query string to perform "enable" operation.
            *
            * @return - graphql query string.
            */
            public GQLQuery enable(Consumer< EnableArgs> input,
                                          Consumer< Types.UserFragment> output){

            final EnableArgs args = new EnableArgs();
            input.accept(args);
            final Arguments arguments = args.getArguments();

            final Types.UserFragment fragment = new Types.UserFragment();
            output.accept(fragment);
            final ResultFragment resultFragment = fragment.getFragment();


            GQLFunction function = new GQLFunction(GQLFunctionType.Mutation, "enable")
            .arguments(arguments)
            .resultFragment(resultFragment)
            .returnType(new TypeReference<Types.User>() {});

            return GQLQuery.from(function);
            }

            /**
            * Arguments provider.
            *
            * @return - EnableArgs for "enable" operation.
            */
            public class EnableArgs {
            private Arguments arguments = new Arguments();

            public EnableArgs enable(Boolean enable) {
                    arguments.add(Argument.of("enable", enable));
                    return this;
                    }public EnableArgs id(String id) {
                    arguments.add(Argument.of("id", id));
                    return this;
                    }

            private Arguments getArguments() {
            return arguments;
            }
            }

            /**
            * Generates GraphQL query string to perform "update" operation.
            *
            * @return - graphql query string.
            */
            public GQLQuery update(Consumer< UpdateArgs> input,
                                          Consumer< Types.UserFragment> output){

            final UpdateArgs args = new UpdateArgs();
            input.accept(args);
            final Arguments arguments = args.getArguments();

            final Types.UserFragment fragment = new Types.UserFragment();
            output.accept(fragment);
            final ResultFragment resultFragment = fragment.getFragment();


            GQLFunction function = new GQLFunction(GQLFunctionType.Mutation, "update")
            .arguments(arguments)
            .resultFragment(resultFragment)
            .returnType(new TypeReference<Types.User>() {});

            return GQLQuery.from(function);
            }

            /**
            * Arguments provider.
            *
            * @return - UpdateArgs for "update" operation.
            */
            public class UpdateArgs {
            private Arguments arguments = new Arguments();

            public UpdateArgs user(Types.UserInput user) {
                    arguments.add(Argument.of("user", user));
                    return this;
                    }

            private Arguments getArguments() {
            return arguments;
            }
            }

            /**
            * Generates GraphQL query string to perform "create" operation.
            *
            * @return - graphql query string.
            */
            public GQLQuery create(Consumer< CreateArgs> input,
                                          Consumer< Types.UserFragment> output){

            final CreateArgs args = new CreateArgs();
            input.accept(args);
            final Arguments arguments = args.getArguments();

            final Types.UserFragment fragment = new Types.UserFragment();
            output.accept(fragment);
            final ResultFragment resultFragment = fragment.getFragment();


            GQLFunction function = new GQLFunction(GQLFunctionType.Mutation, "create")
            .arguments(arguments)
            .resultFragment(resultFragment)
            .returnType(new TypeReference<Types.User>() {});

            return GQLQuery.from(function);
            }

            /**
            * Arguments provider.
            *
            * @return - CreateArgs for "create" operation.
            */
            public class CreateArgs {
            private Arguments arguments = new Arguments();

            public CreateArgs user(Types.UserInput user) {
                    arguments.add(Argument.of("user", user));
                    return this;
                    }

            private Arguments getArguments() {
            return arguments;
            }
            }

        }

    //--------------------------------------------------------------
    //---------QueryBuilder Inner classes---------------------------
    //--------------------------------------------------------------

    /**
     * GraphQL Query builder.
     * Generates a GraphQL query string from a <@code>Function</@code>
     */
    public static class GQLQuery {

        private final ObjectMapper mapper = new ObjectMapper();
        private GQLFunction function;

        private GQLQuery() {
            mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        }

        public static GQLQuery from(GQLFunction function) {
            GQLQuery query = new GQLQuery();
            query.function = function;
            return query;
        }

        public String toString() {
            String query =
                    "\"" + function.getType().getName() + "(" + function.getArguments().toQueryArgumentsString() + ")" +
                            "{ " + function.getName() + "( " + function.getArguments().toMethodArgumentsString() + ")" +
                            "{ " + function.getFragment().toString() + "} }\"";

            ObjectNode rootNode = mapper.createObjectNode();
            rootNode.putRawValue("operationName", null);
            rootNode.putRawValue("query", new RawValue(query));
            rootNode.putPOJO("variables", function.getArguments().toVariables());

            return rootNode.toPrettyString();
        }

        public TypeReference<?> getReturnType() {
            return function.getRturnType();
        }

        public String getName() {
            return function.getName();
        }

    }


    /**
     * Represents a function argument, and it's details.
     */
    public static class Argument {
        private String name;
        private String type;
        private Object value;
        private boolean optional;
        private boolean ignore;

        private Argument() {
        }

        private Argument(String name, Object value) {
            if (value == null) {//mark argument as ignorable
                ignore = true;
                return;

            } else if ((value instanceof Optional)) {
                if (!((Optional<?>) value).isPresent()) {
                    ignore = true;
                    return;
                }
                this.optional = true;
                value = ((Optional<?>) value).get();
            }

            this.name = name;
            this.value = value;
            this.type = this.value.getClass().getSimpleName();
        }

        public static Argument of(String name, Object value) {
            return new Argument(name, value);
        }

        public String getName() {
            return name;
        }

        public Object getValue() {
            return value;
        }

        public String getType() {
            return type;
        }

        public boolean isOptional() {
            return optional;
        }

        public boolean isIgnore() {
            return ignore;
        }
    }


    /**
     * A wrapper for the function arguments.
     */
    public static class Arguments {
        private LinkedHashSet<Argument> arguments = new LinkedHashSet<>();

        private Arguments() {
        }

        private void add(Argument argument) {
            this.arguments.add(argument);
        }

        /**
         * Builds the arguments for graphql FUNCTION.
         * Ex: getUser(firstName: $firstName, lastName: $lastName)...
         *
         * @return graphql function arguments with parameters as variables.
         */
        public String toMethodArgumentsString() {
            StringBuilder sb = new StringBuilder();
            arguments.forEach(arg -> {
                if (!arg.isIgnore()) { //do not build arg if marked as ignorable
                    sb.append(arg.getName()).append(": $").append(arg.getName()).append(", ");
                }
            });
            sb.deleteCharAt(sb.lastIndexOf(","));
            return sb.toString();
        }

        /**
         * Builds the arguments for graphql QUERY type.
         * Ex: mutation($firstName: String, $lastName: String)...
         *
         * @return graphql query arguments with type.
         */
        public String toQueryArgumentsString() {
            StringBuilder sb = new StringBuilder();

            arguments.forEach(arg -> {
                if (!arg.isIgnore()) {
                    sb.append("$")
                            .append(arg.getName())
                            .append(": ")
                            .append(arg.getType())
                            .append(arg.isOptional() ? "" : "!")
                            .append(", ");
                }
            });
            sb.deleteCharAt(sb.lastIndexOf(","));
            return sb.toString();
        }

        /**
         * Builds a map of variables that can be passed to GQL query in the variables JSON element.
         *
         * @return a map of variables.
         */
        public HashMap<String, Object> toVariables() {
            HashMap<String, Object> variables = new HashMap<>();
            arguments.forEach(arg -> {
                if (!arg.isIgnore()) {
                    variables.put(arg.getName(), arg.getValue());
                }
            });

            return variables;
        }
    }


    /**
     * Represents a filed information from a GraphQL fragment.
     */
    public static class FragmentField {
        private String name;
        private LinkedHashSet<FragmentField> fieldList = new LinkedHashSet<>();

        private FragmentField() {
        }

        public static FragmentField of(String name) {
            FragmentField fragmentField = new FragmentField();
            fragmentField.name = name;
            return fragmentField;
        }

        public static FragmentField of(String name, FragmentField... fields) {
            FragmentField fragmentField = new FragmentField();
            fragmentField.name = name;
            fragmentField.fieldList.addAll(Arrays.asList(fields));
            return fragmentField;
        }

        public String getName() {
            return name;
        }

        public LinkedHashSet<FragmentField> getFieldList() {
            return fieldList;
        }
    }


    /**
     * GraphQL function types.
     */
    public enum GQLFunctionType {
        Query("query"),
        Mutation("mutation");

        private final String name;

        GQLFunctionType(final String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }
    }


    /**
     * This is a wrapper that represent a GraphQL function.
     * It contains all the information in order to build a query.
     */
    public static class GQLFunction {
        private TypeReference<?> resultType;
        private GQLFunctionType type;
        private String name;
        private Arguments arguments;
        private ResultFragment resultFragment;

        private GQLFunction() {
        }

        public GQLFunction(GQLFunctionType type, String name) {
            this.name = name;
            this.type = type;
        }

        public GQLFunction returnType(TypeReference<?> resultType) {
            this.resultType = resultType;
            return this;
        }

        public GQLFunction arguments(Arguments arguments) {
            this.arguments = arguments;
            return this;
        }

        public GQLFunction resultFragment(ResultFragment fragment) {
            this.resultFragment = fragment;
            return this;
        }


        public TypeReference<?> getRturnType() {
            return resultType;
        }

        public String getName() {
            return name;
        }

        public Arguments getArguments() {
            return arguments;
        }

        public ResultFragment getFragment() {
            return resultFragment;
        }

        public GQLFunctionType getType() {
            return type;
        }
    }


    /**
     * GraphQL expected result type after the query is executed.
     * Note: This is pure informatory - as this type may or not be used by the user after the HTTP call.
     * However, it is useful to know the expected result type of <@code>Function</@code> that we want to execute.
     */
    public static class ResultFragment {
        private LinkedHashSet<FragmentField> fields = new LinkedHashSet<>();

        private ResultFragment() {
        }

        private ResultFragment add(FragmentField field) {
            this.fields.add(field);
            return this;
        }

        public String toString() {
            return getFieldString(fields);
        }

        private String getFieldString(LinkedHashSet<FragmentField> fields) {
            StringBuilder sb = new StringBuilder();
            fields.forEach(field -> {
                sb.append(field.getName()).append(" ");
                if (field.getFieldList() != null && !field.getFieldList().isEmpty()) {
                    sb.append("{ ").append(getFieldString(field.getFieldList())).append(" } ");
                }
            });
            return sb.toString();
        }
    }

}

