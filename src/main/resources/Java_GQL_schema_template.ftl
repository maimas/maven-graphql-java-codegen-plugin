package ${package};

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.util.RawValue;

import java.util.*;


/**
* GENERATED BY MAVEN-GRAPHQL-JAVA-CODEGEN-PLUGIN.
*/
public class ${className} {

public static class Schema {

}

public static class Types {
<#--ENUM generation {-->
<#list schema.types as type>
    <#if type.name!="" && !type.name?starts_with("__") && typeKindEquals(type,"ENUM")>

        public enum ${type.name} {
        <#list type.enumValues as enum>
            ${enum.name}<#sep>,</#sep>
        </#list>
        }
    </#if>
</#list>
<#--ENUM generation }-->

<#--OBJECT generation {-->
<#list schema.types as type>
    <#if isUserObjectType(type)>
        <#if (type.description??) && type.description!="">
            /**
            * ${type.description}
            */
        </#if>
        public static class ${type.name} {
        <#list type.fields as field>
            public ${getFieldType(field, "")}  ${field.name};
        </#list>
        public static final class Fields {
        <#list type.fields as field>
            public static String ${field.name} = "${field.name}";
        </#list>
        }
        }
    </#if>
</#list>
<#--OBJECT generation }-->

<#--INPUT_OBJECT generation {-->
<#list schema.types as type>
    <#if type.name!="" && !type.name?starts_with("__") && typeKindEquals(type,"INPUT_OBJECT") && !type.name?upper_case?matches("QUERY|MUTATION")>
        ${getTypeDescription(type)}
        public static class ${type.name} {
        <#list type.inputFields as field>
            public ${getFieldType(field, "")}  ${field.name};
        </#list>
        }
    </#if>
</#list>
<#--INPUT_OBJECT generation }-->
}

<#--QUERY & MUTATION generation {-->
<#list schema.types as type>
    <#if typeKindEquals(type,"OBJECT") && (typeNameEquals(type,"QUERY") || typeNameEquals(type,"MUTATION"))>

        ${getTypeDescription(type)}
        public static class ${type.name} {

        <#list type.fields as field>
            /**
            * Generates GraphQL query string to perform "${field.name}" operation.
            *
            * @return - graphql query string.
            */
            public GQLQuery ${field.name}(${buildMethodArguments(field)}, FragmentField... fragmentFields){

            Function function = new Function(FunctionType.${getTypeName(type)}, "${field.name}")
            .arguments(${buildFragmentArguments(field)})
            .resultFragment(fragmentFields)
            .returnType(new TypeReference<${getFieldType(field, "Types.")}>() {});

            return GQLQuery.from(function);
            }

        </#list>
        }
    </#if>
</#list>
<#--QUERY & MUTATION generation }-->

<#--GraphQL Builders content (a set of java classes) {-->
${gqlBuildersContent}
<#--GraphQL Builders content (a set of java classes) }-->

}

<#--Template funtions-->
<#function getFieldType field typePrefix>
    <#assign typeName = "">
    <#assign typeKind = "">
    <#assign resultType = "">

    <#if (field.type.name??)>
        <#assign typeName = field.type.name>
    <#elseif (field.type.ofType.name??)>
        <#if (field.type.kind??)>
            <#assign typeKind = field.type.kind>
        </#if>
        <#assign typeName = field.type.ofType.name>
    </#if>

    <#if typeName?lower_case?matches("boolean|string|date|float|int|id")>
        <#return typeName>
    </#if>

    <#if typeKind!="">
        <#if typeKind?lower_case == "list">
            <#assign typeKind = "List">
            <#assign resultType = typeKind + "<" + typePrefix + typeName + ">">
            <#return resultType>
        </#if>
    </#if>

    <#assign resultType = typePrefix + typeName>
    <#return resultType>
</#function>

<#function typeKindEquals type value>
    <#if (type.kind??)>
        <#return type.kind?upper_case?matches(value?upper_case)>
    <#else>
        <#return false>
    </#if>
</#function>

<#function typeNameEquals type value>
    <#if (type.name??)>
        <#return type.name?upper_case?matches(value?upper_case)>
    <#else>
        <#return false>
    </#if>
</#function>

<#function getTypeName type>
    <#if (type.name??)>
        <#return type.name?capitalize>
    <#else>
        <#return "">
    </#if>
</#function>

<#function buildMethodArguments field>
    <#local result="">
    <#if (field.args??)>
        <#assign argsSize = field.args?size>
        <#list field.args as arg>
            <#if (arg.name??)>
                <#if isArgOptional(arg)>
                    <#local result += "Optional<" + getFieldType(arg, "Types.") + "> " + arg.name>
                <#else>
                    <#local result += getFieldType(arg, "Types.") + " " + arg.name>
                </#if>
                <#if arg?index < argsSize-1>
                    <#local result +=", ">
                </#if>
            </#if>
        </#list>
    </#if>
    <#return result>
</#function>

<#function buildFragmentArguments field>
    <#local result="">
    <#if (field.args??)>
        <#assign argsSize = field.args?size>
        <#list field.args as arg>
            <#if (arg.name??)>
                <#local result += "Argument.of(\"${arg.name}\", ${arg.name})">
                <#if arg?index < argsSize-1>
                    <#local result +=", ">
                </#if>
            </#if>
        </#list>
    </#if>
    <#return result>
</#function>

<#function isArgOptional arg>
    <#if (arg.type.kind??) && arg.type.kind == "NON_NULL">
        <#return false>
    </#if>
    <#return true>
</#function>

<#function getTypeDescription type>
    <#assign description="">
    <#if (type.description??) && type.description!="">
        <#assign description="
        /**
        * ${type.description}
        */">
    </#if>
    <#return description>
</#function>

<#function isUserObjectType type>
    <#if type.name!="" && !type.name?starts_with("__") && typeKindEquals(type,"OBJECT") && !type.name?upper_case?matches("QUERY|MUTATION")>
        <#return true>
    </#if>
    <#return false>
</#function>

